# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time
scalar Map
scalar Any

# Generic Type Input
" Pagination is default input pagination "
input Pagination {
  first: Int!
  offset: Int!
  after: ID 
  query: String!
  sort: [String!]! 
}

" Object that is being paginated "
type PaginationEdgeKtp {
  node: Ktp!
  cursor: ID!
}

" Information about pagination "
type PaginationInfoKtp {
  endCursor: ID!
  hasNextPAge: Boolean!
}

" Result while querying list using graphql "
type PaginationResultKtp {
  totalcount: Int!
  edges: [PaginationEdgeKtp!]!
  pageInfo: PaginationInfoKtp!
}

# End of generic type/input

" Ktp is the implementation of Indonesian Ktp structure "
type Ktp {
  id : Int!
  nik : String!
  nama: String!
  agama: String!
  jenis_kelamin: String!
  tanggal_lahir: Time!
  created_at: Time!
  updated_at: Time!
}

" NewKtp is the body ktp for update and create query "
input NewKtp {
  nik : String!
  nama: String!
  agama: String!
  jenis_kelamin: String!
  tanggal_lahir: String!
}

" Query is the performance that fetch data on the database "
type Query {
  " GetAllKtp will get all Ktp from database "
  getAllKtp: [Ktp]
  " GetKtp will get Ktp with specific id"
  getKtp(id: ID!): Ktp
  " PaginateKtp will search ktp with pagination "
  paginateKtp(input: Pagination!): PaginationResultKtp!
}

" Mutation is performance that change the data on the database "
type Mutation {
  " CreateKtp will create Ktp from data input "
  createKtp(input: NewKtp!): Ktp!
  " UpdateKtp will update Ktp with specific id using data input "
  updateKtp(id: ID!, input: NewKtp): Boolean!
  " DeleteKtp will delete Ktp with specific id "  
  deleteKtp(id: ID!): Boolean!
}

